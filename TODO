TODO List

Flow
* use overload operators to create chains ('=>' or maybe '|' or '+')
* a threshold parameter that controls how many items can be passed, at most,
  in a single run
* start messing with parallel runs, via fork or threads
* use some logging facility
  - make a proper error handling/alerting code

Proc
* file reading/writing node
* char encoding node (there is a first attempt there already, needs to work
  on it and write tests for it)
* an OCR decoding module (any OCR perl modules out-there?)
* a node that runs an external command (system(), or IPC::Run, or...) and maps
  stdin, stdout, stderr respectively to input, output and error queues
* split and join nodes, to allow flows to follow multiple paths
* node(s) to read from and write to message queues (AMQP, MQSeries, ...)
* node that generates RDF content

Item
* start using DataFlow::Item to carry data and metadata through the flow
* autoboxing of data into an Item?
* autofill metadata?
* revamp everything so that nodes may have "types" - scalar, arrayrefs, 
  DataFLow::Item ??
  - one might declare a node to handle only specific types of input
  - if input fails to meet the expected type, one can choose to dicard that
    input or to pass it through unmodified.

Other
* create a DataFlow::Maker class that will read JSON/YAML/something config
  files and create DataFlows out of them

